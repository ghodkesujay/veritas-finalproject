/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DonorRole;

import Business.Donor.Donor;
import Business.EcoSystem;
import Business.DonationRequest.DonationRequest;
import Business.CollectionPoint.CollectionPoint;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.CollectionPointRole.ManageMenu;

/**
 *
 * @author sujayghodke
 */
public class DonorAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    EcoSystem system;
    private UserAccount account;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DonorAreaJPanel(JPanel userProcessContainer, UserAccount account,EcoSystem system) {
        initComponents();
        
        this.account=account;
        this.userProcessContainer = userProcessContainer;
        this.system=system;
        valueLabel.setText("Welcome "+account.getName());
        populateTable();
        pastTblPopulate();
        
    }
    
    public void populateTable(){
         DefaultTableModel model = (DefaultTableModel) restaurentTable.getModel();
        
        model.setRowCount(0);
         
       
                Object[] row = new Object[3];
                //System.out.println();
                for(CollectionPoint restro:system.getRestaurantDirectory().getRestaurantList()){
                     row[0] = restro;
                     //System.out.println(restro.getAdminUName());
                     row[1] = restro.getAddress();
                     row[2] = restro.getNumber();
                     model.addRow(row);
                }
            
            
        
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        restaurentTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        valueLabel1 = new javax.swing.JLabel();
        valueLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pastTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(178, 141, 117));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        restaurentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Collection Point Name", "Address", "PhoneNumber"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(restaurentTable);
        if (restaurentTable.getColumnModel().getColumnCount() > 0) {
            restaurentTable.getColumnModel().getColumn(0).setResizable(false);
            restaurentTable.getColumnModel().getColumn(1).setResizable(false);
            restaurentTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 520, 130));

        requestTestJButton.setText("Raise Collection Request");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, -1, -1));

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, -1, -1));

        enterpriseLabel.setBackground(new java.awt.Color(0, 0, 0));
        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseLabel.setText("Donor:");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 127, 30));

        valueLabel.setBackground(new java.awt.Color(0, 0, 0));
        valueLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        valueLabel.setForeground(new java.awt.Color(255, 255, 255));
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, 260, 26));

        valueLabel1.setBackground(new java.awt.Color(0, 0, 0));
        valueLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        valueLabel1.setForeground(new java.awt.Color(255, 255, 255));
        valueLabel1.setText("Available Collection Points");
        add(valueLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 260, 26));

        valueLabel2.setBackground(new java.awt.Color(0, 0, 0));
        valueLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        valueLabel2.setForeground(new java.awt.Color(255, 255, 255));
        valueLabel2.setText("Your Blood Donation History");
        add(valueLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 290, 26));

        pastTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Collection Point", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(pastTbl);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 520, 110));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Please select a collection point accessible to you then click on below button to proceed");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/images.png"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 440, 120));
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        int selectedRow = restaurentTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to raise collection request","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
           CollectionPoint restaurant = (CollectionPoint)restaurentTable.getValueAt(selectedRow, 0);
            
            
              MenuPanel manageMenu=new MenuPanel(userProcessContainer,account,system,restaurant);
             userProcessContainer.add("Manage Restaurants",manageMenu);
            CardLayout layout=(CardLayout)userProcessContainer.getLayout();
                layout.next(userProcessContainer);
        }
        
        
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        pastTblPopulate();
        
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable pastTbl;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable restaurentTable;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JLabel valueLabel1;
    private javax.swing.JLabel valueLabel2;
    // End of variables declaration//GEN-END:variables

    private void pastTblPopulate() {
        DefaultTableModel model = (DefaultTableModel) pastTbl.getModel();
        
        model.setRowCount(0);
         
       
          for (Donor cust:system.getCustomerDirectory().getCustList()) {
           
            if (cust.getUserName().equals(account.getUsername())) {
               // System.out.println(restro.getOrderList());
               for(DonationRequest menu:cust.getOrderList()){
                Object[] row = new Object[3];
                row[0] = menu;
                row[1] = menu.getCollectionPointName();
               
                //row[2] = menu.getCost();
                row[2] = menu.getStatus();
                model.addRow(row);
               }
                
            }
            
        }
        
        
    }
}
